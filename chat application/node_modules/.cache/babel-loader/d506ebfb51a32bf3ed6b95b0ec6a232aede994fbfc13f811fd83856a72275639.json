{"ast":null,"code":"var _jsxFileName = \"D:\\\\Black project\\\\chat application\\\\src\\\\components\\\\ChatContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = 'http://localhost:3001'; // Default WebSocket server URL\nconst USERNAME = 'User_' + Math.floor(Math.random() * 1000); // Generate random username\n\nconst ChatContainer = () => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [messages, setMessages] = useState([]);\n\n  // Initialize socket connection\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER_URL);\n    setSocket(newSocket);\n\n    // Socket event listeners\n    newSocket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n    newSocket.on('message', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Send message handler\n  const sendMessage = useCallback(text => {\n    if (socket) {\n      const messageData = {\n        text,\n        username: USERNAME,\n        timestamp: new Date().toISOString()\n      };\n      socket.emit('message', messageData);\n\n      // Optimistically add message to UI\n      setMessages(prevMessages => [...prevMessages, messageData]);\n    }\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen bg-chat-bg\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-primary text-white p-4 shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-semibold\",\n        children: \"React Chat App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm opacity-75\",\n        children: [\"Connected as: \", USERNAME]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      messages: messages,\n      currentUser: USERNAME\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"JxNRepM0MiHFVWyMxZni/3fRzVI=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","io","MessageList","MessageInput","jsxDEV","_jsxDEV","SOCKET_SERVER_URL","USERNAME","Math","floor","random","ChatContainer","_s","socket","setSocket","messages","setMessages","newSocket","on","console","log","message","prevMessages","close","sendMessage","text","messageData","username","timestamp","Date","toISOString","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentUser","onSendMessage","_c","$RefreshReg$"],"sources":["D:/Black project/chat application/src/components/ChatContainer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport io from 'socket.io-client';\r\nimport MessageList from './MessageList';\r\nimport MessageInput from './MessageInput';\r\n\r\nconst SOCKET_SERVER_URL = 'http://localhost:3001'; // Default WebSocket server URL\r\nconst USERNAME = 'User_' + Math.floor(Math.random() * 1000); // Generate random username\r\n\r\nconst ChatContainer = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    const newSocket = io(SOCKET_SERVER_URL);\r\n    setSocket(newSocket);\r\n\r\n    // Socket event listeners\r\n    newSocket.on('connect', () => {\r\n      console.log('Connected to WebSocket server');\r\n    });\r\n\r\n    newSocket.on('message', (message) => {\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  // Send message handler\r\n  const sendMessage = useCallback((text) => {\r\n    if (socket) {\r\n      const messageData = {\r\n        text,\r\n        username: USERNAME,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n      \r\n      socket.emit('message', messageData);\r\n      \r\n      // Optimistically add message to UI\r\n      setMessages((prevMessages) => [...prevMessages, messageData]);\r\n    }\r\n  }, [socket]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-screen bg-chat-bg\">\r\n      <div className=\"bg-primary text-white p-4 shadow-md\">\r\n        <h1 className=\"text-xl font-semibold\">React Chat App</h1>\r\n        <p className=\"text-sm opacity-75\">Connected as: {USERNAME}</p>\r\n      </div>\r\n      \r\n      <MessageList \r\n        messages={messages}\r\n        currentUser={USERNAME}\r\n      />\r\n      \r\n      <MessageInput \r\n        onSendMessage={sendMessage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}